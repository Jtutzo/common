// Generated by CoffeeScript 1.12.2
(function() {
  var util;

  util = require('./util');


  /*
   * Send an ajax object
   * @param req
   * @param res
   * @param object
   */

  module.exports.sendObject = function(req, res, object) {
    var response;
    response = {
      'object': object
    };
    res.setHeader('Content-Type', 'application/json');
    return res.send(response);
  };


  /*
   * Send an ajax data
   * @param req
   * @param res
   * @param object
   */

  module.exports.sendData = function(req, res, data) {
    var response;
    response = {
      'aaData': data
    };
    res.setHeader('Content-Type', 'application/json');
    return res.send(response);
  };


  /*
   * Send an ajax message
   * @param req
   * @param res
   * @param object
   */

  module.exports.sendMessage = function(req, res, msg) {
    res.setHeader('Content-Type', 'text/html');
    return res.send(msg);
  };


  /*
   * Send an ajax error
   * @param req
   * @param res
   * @param object
   */

  module.exports.sendError = function(req, res, msg) {
    res.setHeader('Content-Type', 'text/html');
    return res.send("Error technique : [" + msg + "]");
  };


  /*
   * Vérifie et extrait le paramêtres correspondant au nom
   * @param req
   * @param name
   * @param info: {type: string, required: boolean}
   * @return params
   */

  module.exports.extractParam = function(req, name, info) {
    var param, required, type, typeParam;
    util.notObjectException(req, "requestUtil => req must be an object value");
    param = util.isObject(req.body) ? req.body[name] : null;
    if (util.isNotNullOrUndefined(param)) {
      param = JSON.parse(param);
    }
    if (util.isObject(info)) {
      typeParam = util.getType(param);
      required = info['required'];
      type = info['type'];
      if (required && (typeParam === util.UNDEFINED || typeParam === util.NULL)) {
        throw new Error("module requestUtil => params : " + name + " is required.");
      }
      if (util.isString(type && util.isNotEmpty(type && typeParam !== type && ((!required && typeParam !== util.UNDEFINED && typeParam !== util.NULL) || required)))) {
        throw new Error("module requestUtil => params : " + name + " bad type");
      }
    }
    return param;
  };

}).call(this);

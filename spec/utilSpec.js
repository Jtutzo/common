// Generated by CoffeeScript 1.12.2
(function() {
  var util;

  util = require('../bin/util');

  describe("Test la librairie util du module common\n", function() {

    /*====================================================================================
     *                         Tests les methodes exception
    #===================================================================================
     */

    /*
     * Test de la méthode argumentException
     */
    describe("Test de la méthode : argumentException\n", function() {
      it("expr = false, devrait retourner undefined", function() {
        return expect(util.argumentException(false, "message")).toBeUndefined();
      });
      it("expr = true, devrait lancer l'exception ArgumentException", function() {
        return expect(function() {
          return util.argumentException(true, "message");
        }).toThrow(new Error("ArgumentException"));
      });
      it("expr n'est pas un boolean, devrait lancer l'exception ArgumentException", function() {
        return expect(function() {
          return util.argumentException({}, "message");
        }).toThrow(new Error("ArgumentException"));
      });
      it("Sans message, devrait lancer l'exception ArgumentException", function() {
        return expect(function() {
          return util.argumentException(false);
        }).toThrow(new Error("ArgumentException"));
      });
      return it("Avec un message vide, devrait lancer l'exception ArgumentException", function() {
        return expect(function() {
          return util.argumentException(false);
        }).toThrow(new Error("ArgumentException"));
      });
    });

    /*
     * Test de la méthode nullOrUndefinedException
     */
    describe("Test de la méthode : nullOrUndefinedException\n", function() {
      it("La valeur est null, devrait lancer l'exception NullOrUndefinedException", function() {
        return expect(function() {
          return util.nullOrUndefinedException(null, "message");
        }).toThrow(new Error("NullOrUndefinedException"));
      });
      it("La valeur est undefined, devrait lancer l'exception NullOrUndefinedException", function() {
        return expect(function() {
          return util.nullOrUndefinedException(void 0, "message");
        }).toThrow(new Error("NullOrUndefinedException"));
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException(1, "message")).toBeUndefined();
      });
      it("La valeur est un NaN, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException(true)).toBeUndefined();
      });
      return it("Avec un message vide, , devrait retourner undefined", function() {
        return expect(util.nullOrUndefinedException(true, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notNullOrUndefinedException
     */
    describe("Test de la méthode : notNullOrUndefinedException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.notNullOrUndefinedException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.notNullOrUndefinedException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException(false, "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est true, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException(true, "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException(0, "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException(1, "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException(0/0, "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException("", "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException("abc", "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException({}, "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException([], "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotNullOrUndefinedException", function() {
        return expect(function() {
          return util.notNullOrUndefinedException((function() {}), "message");
        }).toThrow(new Error("NotNullOrUndefinedException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notNullOrUndefinedException(null)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notNullOrUndefinedException(null, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode nullException
     */
    describe("Test de la méthode : nullException\n", function() {
      it("La valeur est null, devrait lancer l'exception NullException", function() {
        return expect(function() {
          return util.nullException(null, "message");
        }).toThrow(new Error("NullException"));
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.nullException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.nullException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.nullException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.nullException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.nullException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.nullException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.nullException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.nullException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.nullException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.nullException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.nullException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.nullException(true)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.nullException(true, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notNullException
     */
    describe("Test de la méthode : notNullException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.notNullException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException(void 0, "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est false, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException(false, "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est true, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException(true, "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException(0, "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException(1, "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException(0/0, "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException("", "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException("abc", "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException({}, "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException([], "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotNullException", function() {
        return expect(function() {
          return util.notNullException((function() {}), "message");
        }).toThrow(new Error("NotNullException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notNullException(null)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notNullException(null, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode undefinedException
     */
    describe("Test de la méthode : undefinedException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.undefinedException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait lancer l'exception UndefinedException", function() {
        return expect(function() {
          return util.undefinedException(void 0, "message");
        }).toThrow(new Error("UndefinedException"));
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.undefinedException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.undefinedException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.undefinedException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.undefinedException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.undefinedException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.undefinedException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.undefinedException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.undefinedException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.undefinedException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.undefinedException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.undefinedException(true)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.undefinedException(true, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notUndefinedException
     */
    describe("Test de la méthode : notUndefinedException\n", function() {
      it("La valeur est null, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException(null, "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.notUndefinedException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException(false, "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est true, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException(true, "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException(0, "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException(1, "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException(0/0, "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException("", "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException("abc", "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException({}, "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException([], "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotUndefinedException", function() {
        return expect(function() {
          return util.notUndefinedException((function() {}), "message");
        }).toThrow(new Error("NotUndefinedException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notUndefinedException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notUndefinedException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode blankException
     */
    describe("Test de la méthode : blankException\n", function() {
      it("La valeur est null, devrait lancer l'exception BlankException", function() {
        return expect(function() {
          return util.blankException(null, "message");
        }).toThrow(new Error("BlankException"));
      });
      it("La valeur est undefined, devrait lancer l'exception BlankException", function() {
        return expect(function() {
          return util.blankException(void 0, "message");
        }).toThrow(new Error("BlankException"));
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.blankException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.blankException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.blankException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.blankException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.blankException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception BlankException", function() {
        return expect(function() {
          return util.blankException("", "message");
        }).toThrow(new Error("BlankException"));
      });
      it("La valeur est une chaine de caractère vide (avec un espace), devrait lancer l'exception BlankException", function() {
        return expect(function() {
          return util.blankException(" ", "message");
        }).toThrow(new Error("BlankException"));
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.blankException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.blankException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.blankException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.blankException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.blankException(true)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.blankException(true, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notBlankException
     */
    describe("Test de la méthode : notBlankException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.notBlankException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.notBlankException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException(false, "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est true, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException(true, "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException(0, "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException(1, "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException(0/0, "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.notBlankException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide (avec un espace), devrait retourner undefined", function() {
        return expect(util.notBlankException(" ", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException("abc", "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException({}, "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException([], "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotBlankException", function() {
        return expect(function() {
          return util.notBlankException((function() {}), "message");
        }).toThrow(new Error("NotBlankException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notBlankException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notBlankException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode emptyException
     */
    describe("Test de la méthode : emptyException\n", function() {
      it("La valeur est null, devrait lancer l'exception EmptyException", function() {
        return expect(function() {
          return util.emptyException(null, "message");
        }).toThrow(new Error("EmptyException"));
      });
      it("La valeur est undefined, devrait lancer l'exception EmptyException", function() {
        return expect(function() {
          return util.emptyException(void 0, "message");
        }).toThrow(new Error("EmptyException"));
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.emptyException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.emptyException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.emptyException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.emptyException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.emptyException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception EmptyException", function() {
        return expect(function() {
          return util.emptyException("", "message");
        }).toThrow(new Error("EmptyException"));
      });
      it("La valeur est une chaine de caractère vide (avec un espace), devrait lancer l'exception EmptyException", function() {
        return expect(function() {
          return util.emptyException(" ", "message");
        }).toThrow(new Error("EmptyException"));
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.emptyException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet vide, devrait lancer l'exception EmptyException", function() {
        return expect(function() {
          return util.emptyException({}, "message");
        }).toThrow(new Error("EmptyException"));
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.emptyException({
          a: 1,
          b: 2
        }, "message")).toBeUndefined();
      });
      it("La valeur est une liste vide, devrait lancer l'exception EmptyException", function() {
        return expect(function() {
          return util.emptyException([], "message");
        }).toThrow(new Error("EmptyException"));
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.emptyException([1, 2], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.emptyException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.emptyException(true)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.emptyException(true, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notEmptyException
     */
    describe("Test de la méthode : notEmptyException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.notEmptyException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.notEmptyException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException(false, "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est true, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException(true, "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException(0, "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException(1, "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException(0/0, "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.notEmptyException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide (avec un espace), devrait retourner undefined", function() {
        return expect(util.notEmptyException(" ", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException("abc", "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est un objet vide, devrait retourner undefined", function() {
        return expect(util.notEmptyException({}, "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException({
            a: 1,
            b: 2
          }, "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est une liste vide, devrait retourner undefined", function() {
        return expect(util.notEmptyException([], "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException([1, 2], "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotEmptyException", function() {
        return expect(function() {
          return util.notEmptyException((function() {}), "message");
        }).toThrow(new Error("NotEmptyException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notEmptyException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notEmptyException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode booleanException
     */
    describe("Test de la méthode : booleanException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.booleanException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.booleanException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait lancer l'exception BooleanException", function() {
        return expect(function() {
          return util.booleanException(false, "message");
        }).toThrow(new Error("BooleanException"));
      });
      it("La valeur est true, devrait lancer l'exception BooleanException", function() {
        return expect(function() {
          return util.booleanException(true, "message");
        }).toThrow(new Error("BooleanException"));
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.booleanException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.booleanException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.booleanException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.booleanException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.booleanException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.booleanException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.booleanException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.booleanException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.booleanException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.booleanException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notBooleanException
     */
    describe("Test de la méthode : notBooleanException\n", function() {
      it("La valeur est null, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException(null, "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est undefined, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException(void 0, "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.notBooleanException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.notBooleanException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException(0, "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException(1, "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException(0/0, "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException("", "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException("abc", "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException({}, "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException([], "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotBooleanException", function() {
        return expect(function() {
          return util.notBooleanException((function() {}), "message");
        }).toThrow(new Error("NotBooleanException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notBooleanException(true)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notBooleanException(true, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode numberException
     */
    describe("Test de la méthode : numberException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.numberException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.numberException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.numberException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.numberException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait lancer l'exception NumberException", function() {
        return expect(function() {
          return util.numberException(0, "message");
        }).toThrow(new Error("NumberException"));
      });
      it("La valeur est 1, devrait lancer l'exception NumberException", function() {
        return expect(function() {
          return util.numberException(1, "message");
        }).toThrow(new Error("NumberException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NumberException", function() {
        return expect(function() {
          return util.numberException(0/0, "message");
        }).toThrow(new Error("NumberException"));
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.numberException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.numberException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.numberException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.numberException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.numberException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.numberException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.numberException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notNumberException
     */
    describe("Test de la méthode : notNumberException\n", function() {
      it("La valeur est null, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException(null, "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est undefined, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException(void 0, "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est false, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException(false, "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est true, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException(true, "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.notNumberException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.notNumberException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.notNumberException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException("", "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException("abc", "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException({}, "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException([], "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotNumberException", function() {
        return expect(function() {
          return util.notNumberException((function() {}), "message");
        }).toThrow(new Error("NotNumberException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notNumberException(0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notNumberException(0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode stringException
     */
    describe("Test de la méthode : stringException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.stringException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.stringException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.stringException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.stringException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.stringException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.stringException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.stringException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception StringException", function() {
        return expect(function() {
          return util.stringException("", "message");
        }).toThrow(new Error("StringException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception StringException", function() {
        return expect(function() {
          return util.stringException("abc", "message");
        }).toThrow(new Error("StringException"));
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.stringException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.stringException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.stringException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.stringException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.stringException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notNumberException
     */
    describe("Test de la méthode : notStringException\n", function() {
      it("La valeur est null, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException(null, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est undefined, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException(void 0, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est false, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException(false, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est true, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException(true, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException(0, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException(1, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException(0/0, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.notStringException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.notStringException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException({}, "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException([], "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotStringException", function() {
        return expect(function() {
          return util.notStringException((function() {}), "message");
        }).toThrow(new Error("NotStringException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notStringException("")).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notStringException("", "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode objectException
     */
    describe("Test de la méthode : objectException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.objectException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.objectException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.objectException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.objectException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.objectException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.objectException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.objectException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.objectException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.objectException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait lancer l'exception ObjectException", function() {
        return expect(function() {
          return util.objectException({}, "message");
        }).toThrow(new Error("ObjectException"));
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.objectException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.objectException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.objectException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.objectException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notObjectException
     */
    describe("Test de la méthode : notObjectException\n", function() {
      it("La valeur est null, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException(null, "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est undefined, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException(void 0, "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est false, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException(false, "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est true, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException(true, "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException(0, "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException(1, "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException(0/0, "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException("", "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException("abc", "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.notObjectException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException([], "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("La valeur est une function, devrait lancer l'exception NotObjectException", function() {
        return expect(function() {
          return util.notObjectException((function() {}), "message");
        }).toThrow(new Error("NotObjectException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notObjectException({})).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notObjectException({}, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode arrayException
     */
    describe("Test de la méthode : arrayException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.arrayException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.arrayException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.arrayException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.arrayException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.arrayException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.arrayException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.arrayException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.arrayException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.arrayException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.arrayException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait lancer l'exception ArrayException", function() {
        return expect(function() {
          return util.arrayException([], "message");
        }).toThrow(new Error("ArrayException"));
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.arrayException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.arrayException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.arrayException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notArrayException
     */
    describe("Test de la méthode : notArrayException\n", function() {
      it("La valeur est null, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException(null, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est undefined, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException(void 0, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est false, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException(false, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est true, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException(true, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException(0, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException(1, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException(0/0, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException("", "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException("abc", "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException({}, "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.notArrayException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait lancer l'exception NotArrayException", function() {
        return expect(function() {
          return util.notArrayException((function() {}), "message");
        }).toThrow(new Error("NotArrayException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notArrayException([])).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notArrayException([], "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode functionException
     */
    describe("Test de la méthode : functionException\n", function() {
      it("La valeur est null, devrait retourner undefined", function() {
        return expect(util.functionException(null, "message")).toBeUndefined();
      });
      it("La valeur est undefined, devrait retourner undefined", function() {
        return expect(util.functionException(void 0, "message")).toBeUndefined();
      });
      it("La valeur est false, devrait retourner undefined", function() {
        return expect(util.functionException(false, "message")).toBeUndefined();
      });
      it("La valeur est true, devrait retourner undefined", function() {
        return expect(util.functionException(true, "message")).toBeUndefined();
      });
      it("La valeur est 0, devrait retourner undefined", function() {
        return expect(util.functionException(0, "message")).toBeUndefined();
      });
      it("La valeur est 1, devrait retourner undefined", function() {
        return expect(util.functionException(1, "message")).toBeUndefined();
      });
      it("La valeur est NaN, devrait retourner undefined", function() {
        return expect(util.functionException(0/0, "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère vide, devrait retourner undefined", function() {
        return expect(util.functionException("", "message")).toBeUndefined();
      });
      it("La valeur est une chaine de caractère, devrait retourner undefined", function() {
        return expect(util.functionException("abc", "message")).toBeUndefined();
      });
      it("La valeur est un objet, devrait retourner undefined", function() {
        return expect(util.functionException({}, "message")).toBeUndefined();
      });
      it("La valeur est une liste, devrait retourner undefined", function() {
        return expect(util.functionException([], "message")).toBeUndefined();
      });
      it("La valeur est une function, devrait lancer l'exception FunctionException", function() {
        return expect(function() {
          return util.functionException((function() {}), "message");
        }).toThrow(new Error("FunctionException"));
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.functionException(void 0)).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.functionException(void 0, "")).toBeUndefined();
      });
    });

    /*
     * Test de la méthode notFunctionException
     */
    describe("Test de la méthode : notFunctionException\n", function() {
      it("La valeur est null, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException(null, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est undefined, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException(void 0, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est false, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException(false, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est true, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException(true, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est 0, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException(0, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est 1, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException(1, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est NaN, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException(0/0, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est une chaine de caractère vide, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException("", "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est une chaine de caractère, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException("abc", "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est un objet, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException({}, "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est une liste, devrait lancer l'exception NotFunctionException", function() {
        return expect(function() {
          return util.notFunctionException([], "message");
        }).toThrow(new Error("NotFunctionException"));
      });
      it("La valeur est une function, devrait retourner undefined", function() {
        return expect(util.notFunctionException((function() {}), "message")).toBeUndefined();
      });
      it("Sans message, devrait retourner undefined", function() {
        return expect(util.notFunctionException((function() {}))).toBeUndefined();
      });
      return it("Avec un message vide, devrait retourner undefined", function() {
        return expect(util.notFunctionException((function() {}), "")).toBeUndefined();
      });
    });

    /*====================================================================================
     *                         Tests les methodes utils
    #===================================================================================
     */

    /*
     * Test de la méthode isNullOrUndefined
     */
    describe("Test de la méthode : isNullOrUndefined\n", function() {
      it("La valeur est null, devrait retourner true", function() {
        return expect(util.isNullOrUndefined(null)).toBe(true);
      });
      it("La valeur est undefined, devrait retourner true", function() {
        return expect(util.isNullOrUndefined(void 0)).toBe(true);
      });
      it("La valeur est false, devrait retourner false", function() {
        return expect(util.isNullOrUndefined(false)).toBe(false);
      });
      it("La valeur est true, devrait retourner false", function() {
        return expect(util.isNullOrUndefined(true)).toBe(false);
      });
      it("La valeur est 0, devrait retourner false", function() {
        return expect(util.isNullOrUndefined(0)).toBe(false);
      });
      it("La valeur est 1, devrait retourner false", function() {
        return expect(util.isNullOrUndefined(1)).toBe(false);
      });
      it("La valeur est un NaN, devrait retourner false", function() {
        return expect(util.isNullOrUndefined(0/0)).toBe(false);
      });
      it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
        return expect(util.isNullOrUndefined("")).toBe(false);
      });
      it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
        return expect(util.isNullOrUndefined("abc")).toBe(false);
      });
      it("La valeur est un objet, devrait retourner false", function() {
        return expect(util.isNullOrUndefined({})).toBe(false);
      });
      it("La valeur est une liste, devrait retourner false", function() {
        return expect(util.isNullOrUndefined([])).toBe(false);
      });
      return it("La valeur est une function, devrait retourner false", function() {
        return expect(util.isNullOrUndefined((function() {}))).toBe(false);
      });
    });

    /*
     * Test de la méthode isNotNullOrUndefined
     */
    describe("Test de la méthode : isNotNullOrUndefined\n", function() {
      it("La valeur est null, devrait retourner true", function() {
        return expect(util.isNotNullOrUndefined(null)).toBe(false);
      });
      it("La valeur est undefined, devrait retourner true", function() {
        return expect(util.isNotNullOrUndefined(void 0)).toBe(false);
      });
      it("La valeur est false, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined(false)).toBe(true);
      });
      it("La valeur est true, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined(true)).toBe(true);
      });
      it("La valeur est 0, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined(0)).toBe(true);
      });
      it("La valeur est 1, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined(1)).toBe(true);
      });
      it("La valeur est un NaN, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined(0/0)).toBe(true);
      });
      it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined("")).toBe(true);
      });
      it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined("abc")).toBe(true);
      });
      it("La valeur est un objet, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined({})).toBe(true);
      });
      it("La valeur est une liste, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined([])).toBe(true);
      });
      return it("La valeur est une function, devrait retourner false", function() {
        return expect(util.isNotNullOrUndefined((function() {}))).toBe(true);
      });
    });

    /*
     * Test de la méthode isBlank
     */
    return describe("Test de la méthode : isBlank\n", function() {
      it("La valeur est null, devrait retourner true", function() {
        return expect(util.isBlank(null)).toBe(true);
      });
      it("La valeur est undefined, devrait retourner true", function() {
        return expect(util.isBlank(void 0)).toBe(true);
      });
      it("La valeur est false, devrait retourner false", function() {
        return expect(util.isBlank(false)).toBe(false);
      });
      it("La valeur est true, devrait retourner false", function() {
        return expect(util.isBlank(true)).toBe(false);
      });
      it("La valeur est 0, devrait retourner false", function() {
        return expect(util.isBlank(0)).toBe(false);
      });
      it("La valeur est 1, devrait retourner false", function() {
        return expect(util.isBlank(1)).toBe(false);
      });
      it("La valeur est NaN, devrait retourner false", function() {
        return expect(util.isBlank(0/0)).toBe(false);
      });
      it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
        return expect(util.isBlank("")).toBe(true);
      });
      it("La valeur est une chaine de caractère vide (avec un espace), devrait retourner true", function() {
        return expect(util.isBlank(" ")).toBe(true);
      });
      it("La valeur est une chaine de caractère, devrait retourner false", function() {
        return expect(util.isBlank("abc")).toBe(false);
      });
      it("La valeur est un objet, devrait retourner false", function() {
        return expect(util.isBlank({})).toBe(false);
      });
      it("La valeur est une liste, devrait retourner false", function() {
        return expect(util.isBlank([])).toBe(false);
      });
      return it("La valeur est une function, devrait retourner false", function() {
        return expect(util.isBlank((function() {}))).toBe(false);
      });
    });

    /*
         * Test de la méthode isNotBlank
     */
  });

  describe("Test de la méthode : isNotBlank\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isNotBlank(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isNotBlank(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotBlank(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotBlank(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotBlank(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotBlank(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotBlank(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isNotBlank("")).toBe(false);
    });
    it("La valeur est une chaine de caractère vide (avec un espace), devrait retourner false", function() {
      return expect(util.isNotBlank(" ")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotBlank("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotBlank({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotBlank([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotBlank((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isEmpty
   */

  describe("Test de la méthode : isEmpty\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isEmpty(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isEmpty(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isEmpty(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isEmpty(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isEmpty(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isEmpty(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isEmpty(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isEmpty("")).toBe(true);
    });
    it("La valeur est une chaine de caractère vide (avec un espace), devrait retourner true", function() {
      return expect(util.isEmpty(" ")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isEmpty("abc")).toBe(false);
    });
    it("La valeur est un objet vide, devrait retourner true", function() {
      return expect(util.isEmpty({})).toBe(true);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isEmpty({
        a: 1,
        b: 2
      })).toBe(false);
    });
    it("La valeur est une liste vide, devrait retourner true", function() {
      return expect(util.isEmpty([])).toBe(true);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isEmpty([1, 2])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isEmpty((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNotEmpty
   */

  describe("Test de la méthode : isEmpty\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isNotEmpty(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isNotEmpty(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotEmpty(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotEmpty(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotEmpty(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotEmpty(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotEmpty(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isNotEmpty("")).toBe(false);
    });
    it("La valeur est une chaine de caractère vide (avec un espace), devrait retourner false", function() {
      return expect(util.isNotEmpty(" ")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotEmpty("abc")).toBe(true);
    });
    it("La valeur est un objet vide, devrait retourner false", function() {
      return expect(util.isNotEmpty({})).toBe(false);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotEmpty({
        a: 1,
        b: 2
      })).toBe(true);
    });
    it("La valeur est une liste vide, devrait retourner false", function() {
      return expect(util.isNotEmpty([])).toBe(false);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotEmpty([1, 2])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotEmpty((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isEquals
   */

  describe("Test de la méthode : isEquals\n", function() {
    it("Comparaison de null et null, devrait retourner true", function() {
      return expect(util.isEquals(null, null)).toBe(true);
    });
    it("Comparaison de null et 1, devrait retourner false", function() {
      return expect(util.isEquals(null, 1)).toBe(false);
    });
    it("Comparaison de undefined et undefined, devrait retourner true", function() {
      return expect(util.isEquals(void 0, void 0)).toBe(true);
    });
    it("Comparaison de undefined et null, devrait retourner false", function() {
      return expect(util.isEquals(void 0, null)).toBe(false);
    });
    it("Comparaison de false et false, devrait retourner true", function() {
      return expect(util.isEquals(false, false)).toBe(true);
    });
    it("Comparaison de false et 0, devrait retourner false", function() {
      return expect(util.isEquals(false, 0)).toBe(false);
    });
    it("Comparaison de true et true, devrait retourner true", function() {
      return expect(util.isEquals(true, true)).toBe(true);
    });
    it("Comparaison de true et false, devrait retourner false", function() {
      return expect(util.isEquals(true, false)).toBe(false);
    });
    it("Comparaison de 0 et 0, devrait retourner true", function() {
      return expect(util.isEquals(0, 0)).toBe(true);
    });
    it("Comparaison de 0 et 1, devrait retourner false", function() {
      return expect(util.isEquals(0, 1)).toBe(false);
    });
    it("Comparaison de 1 et 1, devrait retourner true", function() {
      return expect(util.isEquals(1, 1)).toBe(true);
    });
    it("Comparaison de 1 et [], devrait retourner false", function() {
      return expect(util.isEquals(1, [])).toBe(false);
    });
    it("Comparaison de NaN et NaN, devrait retourner true", function() {
      return expect(util.isEquals(0/0, 0/0)).toBe(true);
    });
    it("Comparaison de '' et '', devrait retourner true", function() {
      return expect(util.isEquals("", "")).toBe(true);
    });
    it("Comparaison de ' ' et '', devrait retourner false", function() {
      return expect(util.isEquals(" ", "")).toBe(false);
    });
    it("Comparaison de 'abc et 'abc, devrait retourner true", function() {
      return expect(util.isEquals("abc", "abc")).toBe(true);
    });
    it("Comparaison de 'abc et {}, devrait retourner false", function() {
      return expect(util.isEquals("abc", {})).toBe(false);
    });
    it("Comparaison de {} et {}, devrait retourner true", function() {
      return expect(util.isEquals({}, {})).toBe(true);
    });
    it("Comparaison de {a:1, b:2} et {a:1, b:2}, devrait retourner true", function() {
      return expect(util.isEquals({
        a: 1,
        b: 2
      }, {
        a: 1,
        b: 2
      })).toBe(true);
    });
    it("Comparaison de {a:1, b:2} et {a:1, b:3}, devrait retourner false", function() {
      return expect(util.isEquals({
        a: 1,
        b: 2
      }, {
        a: 1,
        b: 3
      })).toBe(false);
    });
    it("Comparaison de {a:1, b:2} et {a:'1', b:2}, devrait retourner false", function() {
      return expect(util.isEquals({
        a: 1,
        b: 2
      }, {
        a: "1",
        b: 2
      })).toBe(false);
    });
    it("Comparaison de [] et [], devrait retourner true", function() {
      return expect(util.isEquals([], [])).toBe(true);
    });
    it("Comparaison de [1, 2] et [1, 2], devrait retourner true", function() {
      return expect(util.isEquals([1, 2], [1, 2])).toBe(true);
    });
    it("Comparaison de [1, 2] et [1, 3], devrait retourner false", function() {
      return expect(util.isEquals([1, 2], [1, 3])).toBe(false);
    });
    it("Comparaison de [1, 2] et ['1', 2], devrait retourner false", function() {
      return expect(util.isEquals([1, 2], ["1", 2])).toBe(false);
    });
    it("Comparaison de (() ->) et null, devrait lancer l'exception FunctionException", function() {
      return expect(function() {
        return util.isEquals((function() {}), null);
      }).toThrow("FunctionException");
    });
    return it("Comparaison de null et (() ->), devrait lancer l'exception FunctionException", function() {
      return expect(function() {
        return util.isEquals((function() {}), null);
      }).toThrow("FunctionException");
    });
  });


  /*
   * Test de la méthode isNotEquals
   */

  describe("Test de la méthode : isNotEquals\n", function() {
    it("Comparaison de null et null, devrait retourner false", function() {
      return expect(util.isNotEquals(null, null)).toBe(false);
    });
    it("Comparaison de null et 1, devrait retourner true", function() {
      return expect(util.isNotEquals(null, 1)).toBe(true);
    });
    it("Comparaison de undefined et undefined, devrait retourner false", function() {
      return expect(util.isNotEquals(void 0, void 0)).toBe(false);
    });
    it("Comparaison de undefined et null, devrait retourner true", function() {
      return expect(util.isNotEquals(void 0, null)).toBe(true);
    });
    it("Comparaison de false et false, devrait retourner false", function() {
      return expect(util.isNotEquals(false, false)).toBe(false);
    });
    it("Comparaison de false et 0, devrait retourner true", function() {
      return expect(util.isNotEquals(false, 0)).toBe(true);
    });
    it("Comparaison de true et true, devrait retourner false", function() {
      return expect(util.isNotEquals(true, true)).toBe(false);
    });
    it("Comparaison de true et false, devrait retourner true", function() {
      return expect(util.isNotEquals(true, false)).toBe(true);
    });
    it("Comparaison de 0 et 0, devrait retourner false", function() {
      return expect(util.isNotEquals(0, 0)).toBe(false);
    });
    it("Comparaison de 0 et 1, devrait retourner true", function() {
      return expect(util.isNotEquals(0, 1)).toBe(true);
    });
    it("Comparaison de 1 et 1, devrait retourner false", function() {
      return expect(util.isNotEquals(1, 1)).toBe(false);
    });
    it("Comparaison de 1 et [], devrait retourner true", function() {
      return expect(util.isNotEquals(1, [])).toBe(true);
    });
    it("Comparaison de NaN et NaN, devrait retourner false", function() {
      return expect(util.isNotEquals(0/0, 0/0)).toBe(false);
    });
    it("Comparaison de '' et '', devrait retourner false", function() {
      return expect(util.isNotEquals("", "")).toBe(false);
    });
    it("Comparaison de ' ' et '', devrait retourner true", function() {
      return expect(util.isNotEquals(" ", "")).toBe(true);
    });
    it("Comparaison de 'abc et 'abc, devrait retourner false", function() {
      return expect(util.isNotEquals("abc", "abc")).toBe(false);
    });
    it("Comparaison de 'abc et {}, devrait retourner true", function() {
      return expect(util.isNotEquals("abc", {})).toBe(true);
    });
    it("Comparaison de {} et {}, devrait retourner false", function() {
      return expect(util.isNotEquals({}, {})).toBe(false);
    });
    it("Comparaison de {a:1, b:2} et {a:1, b:2}, devrait retourner false", function() {
      return expect(util.isNotEquals({
        a: 1,
        b: 2
      }, {
        a: 1,
        b: 2
      })).toBe(false);
    });
    it("Comparaison de {a:1, b:2} et {a:1, b:3}, devrait retourner true", function() {
      return expect(util.isNotEquals({
        a: 1,
        b: 2
      }, {
        a: 1,
        b: 3
      })).toBe(true);
    });
    it("Comparaison de {a:1, b:2} et {a:'1', b:2}, devrait retourner true", function() {
      return expect(util.isNotEquals({
        a: 1,
        b: 2
      }, {
        a: "1",
        b: 2
      })).toBe(true);
    });
    it("Comparaison de [] et [], devrait retourner false", function() {
      return expect(util.isNotEquals([], [])).toBe(false);
    });
    it("Comparaison de [1, 2] et [1, 2], devrait retourner false", function() {
      return expect(util.isNotEquals([1, 2], [1, 2])).toBe(false);
    });
    it("Comparaison de [1, 2] et [1, 3], devrait retourner true", function() {
      return expect(util.isNotEquals([1, 2], [1, 3])).toBe(true);
    });
    it("Comparaison de [1, 2] et ['1', 2], devrait retourner true", function() {
      return expect(util.isNotEquals([1, 2], ["1", 2])).toBe(true);
    });
    it("Comparaison de (() ->) et null, devrait lancer l'exception FunctionException", function() {
      return expect(function() {
        return util.isNotEquals((function() {}), null);
      }).toThrow("FunctionException");
    });
    return it("Comparaison de null et (() ->), devrait lancer l'exception FunctionException", function() {
      return expect(function() {
        return util.isNotEquals((function() {}), null);
      }).toThrow("FunctionException");
    });
  });


  /*
   * Test de la méthode contains
   */

  describe("Test de la méthode : contains\n", function() {
    it("Array = [null, 1] et seq = null, devrait retourner true", function() {
      return expect(util.contains([null, 1], null)).toBe(true);
    });
    it("Array = [null, 1] et seq = 2, devrait retourner false", function() {
      return expect(util.contains([null, 1], 2)).toBe(false);
    });
    it("Array = null et seq = 2, devrait lancer l'exception NotArrayException", function() {
      return expect(function() {
        return util.contains(null, 2);
      }).toThrow("NotArrayException");
    });
    it("Array = [undefined] et seq = [undefined], devrait retourner true", function() {
      return expect(util.contains([void 0], [void 0])).toBe(true);
    });
    it("Array = [undefined, null] et seq = [undefined, null], devrait retourner true", function() {
      return expect(util.contains([void 0, null], [void 0, null])).toBe(true);
    });
    it("Array = [undefined, 1] et seq = [undefined, 1, 2], devrait retourner false", function() {
      return expect(util.contains([void 0, 1], [void 0, 1, 2])).toBe(false);
    });
    it("Array = [undefined, 1] et seq = [undefined, '1'], devrait retourner false", function() {
      return expect(util.contains([void 0, 1], [void 0, '1'])).toBe(false);
    });
    it("Array = [undefined, 1, 2] et seq = [undefined, 1], devrait retourner true", function() {
      return expect(util.contains([void 0, 1, 2], [void 0, 1])).toBe(true);
    });
    it("Array = [undefined], devrait retourner true", function() {
      return expect(util.contains([void 0])).toBe(true);
    });
    it("Array = [{a:1, b:3}, {a:2, b: 3}] et seq = {a:2, b: 3}, devrait retourner true", function() {
      return expect(util.contains([
        {
          a: 1,
          b: 3
        }, {
          a: 2,
          b: 3
        }
      ], {
        a: 2,
        b: 3
      })).toBe(true);
    });
    it("Array = [{a:1, b:3}, {a:2, b: 3}] et seq = {a:2, b: 4}, devrait retourner false", function() {
      return expect(util.contains([
        {
          a: 1,
          b: 3
        }, {
          a: 2,
          b: 3
        }
      ], {
        a: 2,
        b: 4
      })).toBe(false);
    });
    it("Array = ['coucou', 'lala', 'blabla'] et seq = ['coucou', 'blabla'], devrait retourner true", function() {
      return expect(util.contains(['coucou', 'lala', 'blabla'], ['coucou', 'blabla'])).toBe(true);
    });
    return it("Array = ['coucou', 'blabla'] et seq = ['coucou', 'lala', 'blabla'], devrait retourner false", function() {
      return expect(util.contains(['coucou', 'blabla'], ['coucou', 'lala', 'blabla'])).toBe(false);
    });
  });


  /*
   * Test de la méthode noContains
   */

  describe("Test de la méthode : noContains\n", function() {
    it("Array = [null, 1] et seq = null, devrait retourner false", function() {
      return expect(util.noContains([null, 1], null)).toBe(false);
    });
    it("Array = [null, 1] et seq = 2, devrait retourner true", function() {
      return expect(util.noContains([null, 1], 2)).toBe(true);
    });
    it("Array = null et seq = 2, devrait lancer l'exception NotArrayException", function() {
      return expect(function() {
        return util.noContains(null, 2);
      }).toThrow("NotArrayException");
    });
    it("Array = [undefined] et seq = [undefined], devrait retourner false", function() {
      return expect(util.noContains([void 0], [void 0])).toBe(false);
    });
    it("Array = [undefined, null] et seq = [undefined, null], devrait retourner false", function() {
      return expect(util.noContains([void 0, null], [void 0, null])).toBe(false);
    });
    it("Array = [undefined, 1] et seq = [undefined, 1, 2], devrait retourner true", function() {
      return expect(util.noContains([void 0, 1], [void 0, 1, 2])).toBe(true);
    });
    it("Array = [undefined, 1] et seq = [undefined, '1'], devrait retourner true", function() {
      return expect(util.noContains([void 0, 1], [void 0, '1'])).toBe(true);
    });
    it("Array = [undefined, 1, 2] et seq = [undefined, 1], devrait retourner false", function() {
      return expect(util.noContains([void 0, 1, 2], [void 0, 1])).toBe(false);
    });
    it("Array = [undefined], devrait retourner false", function() {
      return expect(util.noContains([void 0])).toBe(false);
    });
    it("Array = [{a:1, b:3}, {a:2, b: 3}] et seq = {a:2, b: 3}, devrait retourner false", function() {
      return expect(util.noContains([
        {
          a: 1,
          b: 3
        }, {
          a: 2,
          b: 3
        }
      ], {
        a: 2,
        b: 3
      })).toBe(false);
    });
    it("Array = [{a:1, b:3}, {a:2, b: 3}] et seq = {a:2, b: 4}, devrait retourner true", function() {
      return expect(util.noContains([
        {
          a: 1,
          b: 3
        }, {
          a: 2,
          b: 3
        }
      ], {
        a: 2,
        b: 4
      })).toBe(true);
    });
    it("Array = ['coucou', 'lala', 'blabla'] et seq = ['coucou', 'blabla'], devrait retourner false", function() {
      return expect(util.noContains(['coucou', 'lala', 'blabla'], ['coucou', 'blabla'])).toBe(false);
    });
    return it("Array = ['coucou', 'blabla'] et seq = ['coucou', 'lala', 'blabla'], devrait retourner true", function() {
      return expect(util.noContains(['coucou', 'blabla'], ['coucou', 'lala', 'blabla'])).toBe(true);
    });
  });


  /*
   * Test de la méthode clone
   */

  describe("Test de la méthode : clone\n", function() {
    it("Clone d'une valeur undefined, devrait lancer l'exception UndefinedException", function() {
      return expect(function() {
        return util.clone(void 0);
      }).toThrow("UndefinedException");
    });
    it("Clone d'une valeur null, devrait retourner null", function() {
      return expect(util.clone(null)).toBeNull();
    });
    it("Clone d'un boolean, devrait retourner la copie du boolean", function() {
      return expect(util.clone(true)).toBe(true);
    });
    it("Clone d'un nombre, devrait retourner la copie du nombre", function() {
      return expect(util.clone(1)).toBe(1);
    });
    it("Clone d'un string, devrait retourner la copie du string", function() {
      return expect(util.clone("abc")).toBe("abc");
    });
    it("Clone d'un objet, devrait retourner la copie du objet", function() {
      return expect(util.clone({
        a: 1,
        b: 2
      })).toEqual({
        a: 1,
        b: 2
      });
    });
    it("Clone d'une liste, devrait retourner la copie de la liste", function() {
      return expect(util.clone([1, 2])).toEqual([1, 2]);
    });
    return it("Clone d'une function, devrait lancer l'exception FunctionException", function() {
      return expect(function() {
        return util.clone((function() {}));
      }).toThrow("FunctionException");
    });
  });


  /*====================================================================================
   *                            methode check or get type
  #===================================================================================
   */


  /*
   * Test de la méthode isNull
   */

  describe("Test de la méthode : isNull\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNull(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isNull(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isNull(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isNull(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isNull(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isNull(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isNull(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isNull("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isNull("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isNull({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isNull([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isNull((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNull
   */

  describe("Test de la méthode : isNotNull\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isNotNull(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isNotNull(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotNull(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotNull(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotNull(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotNull(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotNull(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isNotNull("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotNull("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotNull({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotNull([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotNull((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isUndefined
   */

  describe("Test de la méthode : isUndefined\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isUndefined(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isUndefined(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isUndefined(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isUndefined(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isUndefined(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isUndefined(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isUndefined(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isUndefined("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isUndefined("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isUndefined({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isUndefined([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isUndefined((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNotUndefined
   */

  describe("Test de la méthode : isNotUndefined\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNotUndefined(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isNotUndefined(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotUndefined(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotUndefined(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotUndefined(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotUndefined(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotUndefined(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isNotUndefined("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotUndefined("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotUndefined({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotUndefined([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotUndefined((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isBoolean
   */

  describe("Test de la méthode : isBoolean\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isBoolean(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isBoolean(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isBoolean(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isBoolean(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isBoolean(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isBoolean(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isBoolean(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isBoolean("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isBoolean("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isBoolean({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isBoolean([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isBoolean((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNotBoolean
   */

  describe("Test de la méthode : isNotBoolean\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNotBoolean(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isNotBoolean(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isNotBoolean(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isNotBoolean(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotBoolean(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotBoolean(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotBoolean(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isNotBoolean("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotBoolean("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotBoolean({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotBoolean([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotBoolean((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isNumber
   */

  describe("Test de la méthode : isNumber\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isNumber(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isNumber(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isNumber(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isNumber(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNumber(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNumber(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNumber(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isNumber("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isNumber("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isNumber({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isNumber([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isNumber((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNotNumber
   */

  describe("Test de la méthode : isNotNumber\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNotNumber(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isNotNumber(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotNumber(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotNumber(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isNotNumber(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isNotNumber(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isNotNumber(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isNotNumber("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotNumber("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotNumber({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotNumber([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotNumber((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isString
   */

  describe("Test de la méthode : isString\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isString(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isString(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isString(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isString(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isString(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isString(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isString(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isString("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isString("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isString({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isString([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isString((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNotString
   */

  describe("Test de la méthode : isNotString\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNotString(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isNotString(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotString(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotString(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotString(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotString(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotString(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isNotString("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isNotString("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotString({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotString([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotString((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isObject
   */

  describe("Test de la méthode : isObject\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isObject(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isObject(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isObject(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isObject(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isObject(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isObject(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isObject(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isObject("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isObject("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isObject({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isObject([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isObject((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNotObject
   */

  describe("Test de la méthode : isNotObject\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNotObject(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isNotObject(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotObject(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotObject(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotObject(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotObject(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotObject(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isNotObject("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotObject("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isNotObject({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotObject([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotObject((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isArray
   */

  describe("Test de la méthode : isArray\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isArray(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isArray(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isArray(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isArray(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isArray(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isArray(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isArray(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isArray("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isArray("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isArray({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isArray([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isArray((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode isNotArray
   */

  describe("Test de la méthode : isNotArray\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNotArray(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isNotArray(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotArray(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotArray(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotArray(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotArray(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotArray(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isNotArray("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotArray("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotArray({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isNotArray([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isNotArray((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isFunction
   */

  describe("Test de la méthode : isFunction\n", function() {
    it("La valeur est null, devrait retourner false", function() {
      return expect(util.isFunction(null)).toBe(false);
    });
    it("La valeur est undefined, devrait retourner false", function() {
      return expect(util.isFunction(void 0)).toBe(false);
    });
    it("La valeur est false, devrait retourner false", function() {
      return expect(util.isFunction(false)).toBe(false);
    });
    it("La valeur est true, devrait retourner false", function() {
      return expect(util.isFunction(true)).toBe(false);
    });
    it("La valeur est 0, devrait retourner false", function() {
      return expect(util.isFunction(0)).toBe(false);
    });
    it("La valeur est 1, devrait retourner false", function() {
      return expect(util.isFunction(1)).toBe(false);
    });
    it("La valeur est NaN, devrait retourner false", function() {
      return expect(util.isFunction(0/0)).toBe(false);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner false", function() {
      return expect(util.isFunction("")).toBe(false);
    });
    it("La valeur est une chaine de caractère, devrait retourner false", function() {
      return expect(util.isFunction("abc")).toBe(false);
    });
    it("La valeur est un objet, devrait retourner false", function() {
      return expect(util.isFunction({})).toBe(false);
    });
    it("La valeur est une liste, devrait retourner false", function() {
      return expect(util.isFunction([])).toBe(false);
    });
    return it("La valeur est une function, devrait retourner true", function() {
      return expect(util.isFunction((function() {}))).toBe(true);
    });
  });


  /*
   * Test de la méthode isNotFunction
   */

  describe("Test de la méthode : isNotFunction\n", function() {
    it("La valeur est null, devrait retourner true", function() {
      return expect(util.isNotFunction(null)).toBe(true);
    });
    it("La valeur est undefined, devrait retourner true", function() {
      return expect(util.isNotFunction(void 0)).toBe(true);
    });
    it("La valeur est false, devrait retourner true", function() {
      return expect(util.isNotFunction(false)).toBe(true);
    });
    it("La valeur est true, devrait retourner true", function() {
      return expect(util.isNotFunction(true)).toBe(true);
    });
    it("La valeur est 0, devrait retourner true", function() {
      return expect(util.isNotFunction(0)).toBe(true);
    });
    it("La valeur est 1, devrait retourner true", function() {
      return expect(util.isNotFunction(1)).toBe(true);
    });
    it("La valeur est NaN, devrait retourner true", function() {
      return expect(util.isNotFunction(0/0)).toBe(true);
    });
    it("La valeur est une chaine de caractère vide, devrait retourner true", function() {
      return expect(util.isNotFunction("")).toBe(true);
    });
    it("La valeur est une chaine de caractère, devrait retourner true", function() {
      return expect(util.isNotFunction("abc")).toBe(true);
    });
    it("La valeur est un objet, devrait retourner true", function() {
      return expect(util.isNotFunction({})).toBe(true);
    });
    it("La valeur est une liste, devrait retourner true", function() {
      return expect(util.isNotFunction([])).toBe(true);
    });
    return it("La valeur est une function, devrait retourner false", function() {
      return expect(util.isNotFunction((function() {}))).toBe(false);
    });
  });


  /*
   * Test de la méthode getType
   */

  describe("Test de la méthode : getType\n", function() {
    it("La valeur est null, devrait retourner 'null'", function() {
      return expect(util.getType(null)).toBe("null");
    });
    it("La valeur est undefined, devrait retourner 'undefined'", function() {
      return expect(util.getType(void 0)).toBe("undefined");
    });
    it("La valeur est false, devrait retourner 'boolean'", function() {
      return expect(util.getType(false)).toBe("boolean");
    });
    it("La valeur est true, devrait retourner 'boolean'", function() {
      return expect(util.getType(true)).toBe("boolean");
    });
    it("La valeur est 0, devrait retourner 'number'", function() {
      return expect(util.getType(0)).toBe("number");
    });
    it("La valeur est 1, devrait retourner 'number'", function() {
      return expect(util.getType(1)).toBe("number");
    });
    it("La valeur est NaN, devrait retourner 'number'", function() {
      return expect(util.getType(0/0)).toBe("number");
    });
    it("La valeur est une chaine de caractère vide, devrait retourner 'string'", function() {
      return expect(util.getType("")).toBe("string");
    });
    it("La valeur est une chaine de caractère, devrait retourner 'string'", function() {
      return expect(util.getType("abc")).toBe("string");
    });
    it("La valeur est un objet, devrait retourner 'object'", function() {
      return expect(util.getType({})).toBe("object");
    });
    it("La valeur est une liste, devrait retourner 'array'", function() {
      return expect(util.getType([])).toBe("array");
    });
    return it("La valeur est une function, devrait retourner 'function'", function() {
      return expect(util.getType((function() {}))).toBe("function");
    });
  });

}).call(this);
